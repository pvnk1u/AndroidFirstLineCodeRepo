<?xml version="1.0" encoding="utf-8"?>
<androidx.drawerlayout.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/drawerLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">


    <!--
    CoordinatorLayout是一个加强版的FrameLayout，由AndroidX库提供。
    它在普通情况下的作用和FrameLayout基本一致，但是它可以监听所有子控件的各种事件，并自动做出最合理的响应，
    比如保证各个组件自动调整位置，不会被新弹出的控件遮挡。
    -->
    <androidx.coordinatorlayout.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <!--将AppBar放在AppBarLayout中，可以实现由MaterialLayout自动协调布局避免遮挡的效果-->
        <com.google.android.material.appbar.AppBarLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <!--
            在Toolbar中添加了一个app:layout_scrollFlags属性，并将这个属性的值指定成了
            scroll|enterAlways|snap。其中，scroll表示当RecyclerView向上滚动的时候，
            Toolbar会跟着一起向上滚动并实现隐藏；enterAlways表示当RecyclerView向下滚动的时
            候，Toolbar会跟着一起向下滚动并重新显示；snap表示当Toolbar还没有完全隐藏或显示的时
            候，会根据当前滚动的距离，自动选择是隐藏还是显示。
            -->
            <androidx.appcompat.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                android:background="@color/design_default_color_primary"
                android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
                app:layout_scrollFlags="scroll|enterAlways|snap"
                />

        </com.google.android.material.appbar.AppBarLayout>


        <!--使用SwipeRefreshLayout将需要下拉刷新的RecyclerView包括，
        这样RecyclerView就自动拥有下拉刷新功能了，另外需要注意，
        由于RecyclerView现在变成了SwipeRefreshLayout的子控件，
        因此之前使用app:layout_behavior声明的布局行为现在
        也要移到SwipeRefreshLayout中才行。-->

        <!--
            使用app:layout_behavior属性指定了一个布局行为。
            其中appbar_scrolling_view_behavior这个字符串也是由Material库提供的
            -->
        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
            android:id="@+id/swipeRefresh"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_behavior="@string/appbar_scrolling_view_behavior">



            <androidx.recyclerview.widget.RecyclerView
                android:id="@+id/recyclerView"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                 />
        </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>

        <!--
        FloatingActionButton 悬浮按钮
        layout_width和layout_height属性都指定成wrap_content，
        layout_gravity属性指定将这个控件放置于屏幕的右下角。
        其中end的工作原理和之前的start是一样的，即如果系统语言是从左往右的，
        那么end就表示在右边，如果系统语言是从右往左的，那么end就表示在左边。
        然后通过layout_margin属性给控件的四周留点边距，紧贴着屏幕边缘肯定是不好看的，
        最后通过src属性给FloatingActionButton设置了一个图标。
        -->
        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom|end"
            android:layout_margin="16dp"
            android:src="@drawable/ic_done" />
    </androidx.coordinatorlayout.widget.CoordinatorLayout>


    <!--
    设置滑动菜单中的内容是NavigationView导航视图

    通过app:menu和app:headerLayout属性将准备好的nav_menu.xml和nav_header.xml设置了进去
    -->
    <com.google.android.material.navigation.NavigationView
        android:id="@+id/navView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        app:menu="@menu/nav_menu"
        app:headerLayout="@layout/nav_header"/>
</androidx.drawerlayout.widget.DrawerLayout>